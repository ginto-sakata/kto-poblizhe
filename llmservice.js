const { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold, Part } = require("@google/generative-ai");

const scoringService = require('./scoringService'); // For fallback

let genAI;
let geminiModel;


function initializeLlm(apiKey) {
    if (apiKey) {
        try {
            genAI = new GoogleGenerativeAI(apiKey);
            geminiModel = genAI.getGenerativeModel({
                 model: "gemini-2.0-flash-lite", // *** Use specified model ***
                 // Configure safety settings if needed - adjust as necessary
                 safetySettings: [
                     { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_NONE },
                     { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_NONE },
                     { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_NONE },
                     { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_NONE },
                 ],
                 // *** Configure for JSON output with schema ***
                 generationConfig: {
                     responseMimeType: "application/json",
                     responseSchema: {
                        type: "OBJECT",
                        properties: {
                          scores: {
                            type: "OBJECT",
                            description: "–û–±—ä–µ–∫—Ç —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤. –ö–ª—é—á - ID –∏–≥—Ä–æ–∫–∞ (—Å—Ç—Ä–æ–∫–∞), –∑–Ω–∞—á–µ–Ω–∏–µ - –æ—Ü–µ–Ω–∫–∞ (—á–∏—Å–ª–æ).",
                            propertyNames: {
                              "type": "string"
                            },
                            properties: {},  // ADDED THIS EMPTY PROPERTIES DEFINITION
                            required: []
                          },
                          commentary: {
                            type: "STRING",
                            description: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–µ–¥—É—â–µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ–± –æ—Ç–≤–µ—Ç–∞—Ö —Ä–∞—É–Ω–¥–∞, –≤–∫–ª—é—á–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç, —à—É—Ç–∫—É –∏–ª–∏ –ø–æ—Ö–≤–∞–ª—É.",
                            nullable : false,
                          },
                        },
                        required: [
                          "scores",
                          "commentary",
                        ],
                      },
                 },
            });
            console.log("Gemini AI Initialized in llmService using gemini-2.0-flash-lite with JSON schema.");
            return true; // Indicate success
        } catch (error) {
            console.error("Failed to initialize Gemini AI:", error.message);
            geminiModel = null;
            return false; // Indicate failure
        }
    } else {
        console.warn("GEMINI_API_KEY not found. LLM features will be disabled.");
        geminiModel = null;
        return false; // Indicate LLM not available
    }
}

function isLLMAvailable() {
    return !!geminiModel;
}

async function evaluateWithLLM(question, players) {
    const defaultResult = { scores: {}, commentary: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò." };

    if (!geminiModel) {
        console.warn("LLM not available. Falling back to numerical evaluation.");
        defaultResult.scores = scoringService.evaluateNumerically(question['–û—Ç–≤–µ—Ç'], players);
        defaultResult.commentary = "(–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)";
        return defaultResult;
    }
    if (!players || typeof players !== 'object' || Object.keys(players).length === 0) {
        console.log("No players or invalid players object to evaluate with LLM.");
        return defaultResult;
    }

    const playerAnswersList = Object.values(players)
        .filter(p => p && p.id && p.name)
        .map(p => `- ${p.name} (ID ${p.id}): "${p.answer || '(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)'}"`);

    if (playerAnswersList.length === 0) {
        console.log("No valid player answers to evaluate with LLM.");
        return defaultResult;
    }

    const playerAnswersString = playerAnswersList.join('\n');

    // --- Updated Prompt (Schema is now in config, prompt focuses on task) ---
    const promptContent = `
–¢—ã ‚Äî —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –∏ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –≤–µ–¥—É—â–∏–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã "–ö—Ç–æ –ü–æ–±–ª–∏–∂–µ?", —Å–ø–æ—Å–æ–±–Ω—ã–π —à—É—Ç–∏—Ç—å, —É–¥–∏–≤–ª—è—Ç—å—Å—è —Ä–µ–¥–∫–∏–º —Ñ–∞–∫—Ç–∞–º –∏ –ø–æ–¥—à—É—á–∏–≤–∞—Ç—å –Ω–∞–¥ –∏–≥—Ä–æ–∫–∞–º–∏ –∑–∞ –ø—Ä–æ–º–∞—Ö–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –∏ –¥–∞—Ç—å —è—Ä–∫–∏–π, –∂–∏–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é JSON-—Å—Ö–µ–º—É.

–í–æ–ø—Ä–æ—Å: **"\${question['–í–æ–ø—Ä–æ—Å']}"**  
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: **"\${question['–û—Ç–≤–µ—Ç']}"**  
–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:
${playerAnswersString}

### –ü—Ä–∞–≤–∏–ª–∞ –æ—Ü–µ–Ω–∫–∏ (–∫–ª—é—á "scores" –≤ JSON):
- **3 –æ—á–∫–∞** ‚Äì –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–∞–ª —Ç–æ—á–Ω—ã–π –∏–ª–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ —á–∏—Å–ª–∞–º!  
- **2 –æ—á–∫–∞** ‚Äì –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ø–∞–ª –≤ 3 –æ—á–∫–∞, –Ω–æ –æ—Ç–≤–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–º–µ—Ç–Ω–æ –±–ª–∏–∂–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö. –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –±–ª–∏–∑–∫–∏, –æ–Ω–∏ –í–°–ï –ø–æ–ª—É—á–∞—é—Ç –ø–æ 2 –æ—á–∫–∞.  
- **0 –æ—á–∫–æ–≤** ‚Äì –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª—ë–∫ –æ—Ç –∏—Å—Ç–∏–Ω—ã (–∏ –¥–∞, —Ç—É—Ç –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–∫–æ–ª–æ—Ç—å).  

### –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∫–ª—é—á "commentary" –≤ JSON):
–¢–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî —ç—Ç–æ –Ω–µ —Å–∫—É—á–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫, –∞ —à–æ—É! –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:  
- **–í–µ—Å—ë–ª—ã–º** ‚Äì —à—É—Ç–∏, —Å—Ç–µ–±–∏, –Ω–æ –≤ –º–µ—Ä—É –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.  
- **–û—Å—Ç—Ä–æ—É–º–Ω—ã–º** ‚Äì –º–æ–∂–µ—à—å —É–¥–∏–≤–ª—è—Ç—å—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º, –ø–æ–¥–º–µ—á–∞—Ç—å –≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–∞—Ö–∏.  
- **–ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–º** ‚Äì –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –ø–æ —Ç–µ–º–µ.  
- **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º** ‚Äì —Ö–≤–∞–ª–∏ –º–µ—Ç–∫–∏–µ –¥–æ–≥–∞–¥–∫–∏ –∏ –ø–æ–¥–∫–∞–ª—ã–≤–∞–π —ç–ø–∏—á–Ω—ã–µ –ø—Ä–æ–≤–∞–ª—ã.  

**–ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**  
- üéØ "–ë–∏–Ω–≥–æ! \${Object.values(players)[0]?.name || '–ò–≥—Ä–æ–∫'} –ø–æ–ø–∞–ª –≤ –¥–µ—Å—è—Ç–∫—É! –•–æ—Ç—è, –ø—Ä–∏–∑–Ω–∞–µ–º—Å—è, –≤–æ–ø—Ä–æ—Å –±—ã–ª –ª—ë–≥–∫–∏–π..."  
- ü§Ø "–ß—Ç–æ?! \${Object.values(players)[1]?.name || '–ö—Ç–æ-—Ç–æ'} —Å–µ—Ä—å—ë–∑–Ω–æ –Ω–∞–ø–∏—Å–∞–ª **—ç—Ç–æ**? –¢–µ–ø–µ—Ä—å –º–Ω–µ —Å—Ç—Ä–∞—à–Ω–æ..."  
- üìö "–ê –≤–æ—Ç –≤–∞–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç: \${random_fact_about_topic}"  
- üßê "–ù—É –ø–æ—á—Ç–∏! –ù–æ –Ω–µ—Ç. –ë–ª–∏–∂–µ –≤—Å–µ—Ö –æ–∫–∞–∑–∞–ª—Å—è \${Object.values(players)[2]?.name || '–∏–≥—Ä–æ–∫'}!"  
- üòÇ "–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞, –Ω–æ –Ω–µ—Ç. –•–æ—Ç—è —è –±—ã —Ö–æ—Ç–µ–ª –∂–∏—Ç—å –≤ –º–∏—Ä–µ, –≥–¥–µ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞!"
–í–æ–∑–≤—Ä–∞—â–∞–π JSON, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ.`;
    // --- End of Updated Prompt ---


    try {
        // console.log("--- LLM PROMPT CONTENT ---"); // Debug
        // console.log(promptContent);
        // console.log("--------------------------");

        const result = await geminiModel.generateContent(promptContent); // Pass only the text content
        const response = await result.response;

        if (!response || !response.candidates?.length || !response.candidates[0].content?.parts?.length) {
             throw new Error("LLM response structure invalid or empty candidates/parts.");
        }

        // Access JSON directly from the first candidate's part
        const jsonResponse = response.candidates[0].content.parts[0].functionCall
                              ? response.candidates[0].content.parts[0].functionCall.args // If using function calling style schema
                              : response.candidates[0].content.parts[0].text // If using direct text JSON output
                                ? JSON.parse(response.candidates[0].content.parts[0].text) // Parse text if available
                                : null; // Fallback

         if (!jsonResponse) {
             throw new Error("Could not extract valid JSON data from LLM response part.");
         }

        // console.log("--- LLM PARSED RESPONSE ---"); // Debug
        // console.log(JSON.stringify(jsonResponse, null, 2));
        // console.log("--------------------------");

        // --- Validate Scores and Commentary from parsed JSON ---
        const validatedScores = {};
        const commentary = (jsonResponse && typeof jsonResponse.commentary === 'string')
                            ? jsonResponse.commentary.trim()
                            : "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò –Ω–µ –ø–æ–ª—É—á–µ–Ω.";

        const rawScores = (jsonResponse && typeof jsonResponse.scores === 'object') ? jsonResponse.scores : {};

        Object.keys(players).forEach(playerId => {
            const player = players[playerId];
            if (player && player.id) {
                 const score = rawScores[playerId];
                 // Use the schema's enum check implicitly by trusting the model was configured
                 if ([0, 2, 3].includes(score)) {
                     validatedScores[playerId] = score;
                 } else {
                     console.warn(`LLM response score for ${playerId} (${score}) not in [0, 2, 3] or missing. Defaulting to 0.`);
                     validatedScores[playerId] = 0;
                 }
            }
        });

        console.log("LLM Evaluation Scores:", validatedScores);
        if (commentary === "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò –Ω–µ –ø–æ–ª—É—á–µ–Ω.") console.warn("LLM did not provide commentary.");

        return { scores: validatedScores, commentary: commentary };

    } catch (error) {
        console.error(`LLM evaluation error for Q[${question['‚Ññ']}]:`, error);
        // Attempt to parse error details if available
         let errorDetails = error.message;
         if (error.response && error.response.promptFeedback) {
             errorDetails += ` | Feedback: ${JSON.stringify(error.response.promptFeedback)}`;
         }
        console.warn("Falling back to numerical evaluation due to LLM error.");
        return {
            scores: scoringService.evaluateNumerically(question['–û—Ç–≤–µ—Ç'], players),
            commentary: `(–û—à–∏–±–∫–∞ –ò–ò: ${errorDetails.substring(0, 100)}...)` // Include brief error info
        };
    }
}

module.exports = {
    initializeLlm,
    isLLMAvailable,
    evaluateWithLLM
};